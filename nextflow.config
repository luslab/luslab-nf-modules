includeConfig "configs/luslab-base.config"

manifest {
    name = 'Manual Test Pipeline'
    author = 'Luscombe Lab'
    homePage = 'https://github.com/luslab/luslab-nf-modules'
    description = 'pipeline-description'
    nextflowVersion = '>=20.07.1'
    version = '1.0'
}

process {
  withName: max_cpu_q_resources {
        cpus = { check_max( 100, 'cpus' ) }
        memory = { check_max( 800.GB, 'memory' ) }
        time = { check_max( 1000.h, 'time' ) }
        queue = 'cpu'
    }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}